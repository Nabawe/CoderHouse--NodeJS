GET '/api/productos' -> devuelve todos los productos.
GET '/api/productos/:id' -> devuelve un producto según su id.
POST '/api/productos' -> recibe y agrega un producto, y lo devuelve con su id asignado.
PUT '/api/productos/:id' -> recibe y actualiza un producto según su id.
DELETE '/api/productos/:id' -> elimina un producto según su id.

Para el caso de que un producto no exista, se devolverá el objeto:
{ error : 'producto no encontrado' }


Implementar la API en una clase separada, utilizando un array como soporte de persistencia en memoria.
    Ver explicacion en grabación 01°40'57"
        Server.use( '/api', products );
            Pedir explicación de esta línea.
            Rogelio Arzola Gomez:	Es solo los datos del producto pero en todos las rutas…ok
            Creo q se refiere a q aparte de tener los productos en un archivo tenerlos en memoria?
            Clase o Ruta separada?
            O Sea q no uso JSONBox? ( Container de entrega 02__Node_FS )


Incorporar el Router de express en la url base '/api/productos' y configurar todas las sub-rutas en base a este.

index.html con un formulario de ingreso de productos con los datos apropiados.

El servidor debe estar basado en express y debe implementar los mensajes de conexión al puerto 8080 y en caso de error, representar la descripción del mismo.


Las respuestas del servidor serán en formato JSON. La funcionalidad será probada a través de Postman y del formulario de ingreso.
