TO-DO to finish the minimum missing info is in:
    https://parceljs.org/features/targets
    https://parceljs.org/languages/typescript
    https://parceljs.org/languages/javascript
    https://parceljs.org/getting-started/library/#commonjs-and-es-modules


+ CODEX
+ TERMS
+ TOOLS

+ Mantras

+ Base Setup
+ Babel
+ Base tsconfig.json
+ Deployment Template: NodeJS
+ Deployment Template: ReactJS thru Parcel
+ Deployment Template: React Native

+ QUESTIONS
+ TO-DO
+ AUXILIO
+ SOURCES


+ CODEX
    + Section
        - Subsection or Item
            · Subsection or Item
                * Subsection or Item (Free-form from this level downwards, try to avoid asterisk as it could have other uses)
                    <> Subsection or Item

    - Abbreviations:
        · TS    = TypeScript
        · JS    = JavaScript
        · TSC   = TypeScript Compiler
        · RN    = React Native
+ CODEX


+ TERMS
    - Transpiler
        Source to source compiler. AKAs: source-to-source compiler, transcompiler
+ TERMS


+ TOOLS
    - Definitely Typed
        https://www.typescriptlang.org/dt/
        https://github.com/DefinitelyTyped/DefinitelyTyped
        To find TypeScrip enabled libs or to obtain the Types Definitions Files.

    - Paste JSON as Code (Refresh) by Will 保哥
        https://marketplace.visualstudio.com/items?itemName=doggy8088.quicktype-refresh
+ TOOLS


+ Mantras
    " you can incrementally upgrade your JavaScript code to TypeScript "

    " Type errors do not prevent JavaScript emit. To make it easy for you to migrate your JavaScript code to TypeScript, even if there are compilation errors, by default TypeScript will emit valid JavaScript the best that it can. "
+ Mantras


+ Base Setup
    - npm i -D typescript

    - VS Code > Preferences: Open Workspace Settings (JSON)
        "files.exclude": {
            "**/*.js": { "when": "$(basename).ts" },
            "/.js": { "when": "$(basename).tsx" }
        }
            This is to exclude  JS search results
                ? Ver si se tambien excluye .mjs

    - package.json root
        "main": "dist/index.js",
            // ? NO ESTOY SEGURO Q PONER AQUI, si index.js, dist/index.js .ts .tsx o q
            /* * Recordar q todo esta corriengo gracias a Parcel por ende creo q no es importante ya q no estaria usando node . o nodemon posiblmente si deberia ir a dist/index.js a menos q configue react para correr TypeScript */
        "type": "module",
        "types": "dist/index.d.ts",         // So that index.d.ts files are generated
            ? Creo q esta linea debería apuntar a un directorio
            * Following Parcel Docs, it might need this line to know to autogenerate the .d.ts files
                https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html
                    Segun las docs es opcional especificarlo y al no especificarlo se busca en base a lo puesto en package.json main.
        "scripts": {
            "check": "tsc --noEmit"
        },


    ! CHECK IF THIS IS NECESARY
        https://typescript-eslint.io/docs/

    .gitignore
        # parcel cache (https://parceljs.org/)
        .cache
        .parcel-cache

    ! Might need to add /dist since the files seam to get quite big
+ Base Setup


+ Babel
    ! Esto ya no es practica comun
    npm install @babel/core @babel/cli @babel/preset-env
        El primer módulo es la librería principal, el segundo es el cliente por terminal, y el tercero es el plugin de configuración para que soporte todos los JavaScript de la nueva generación.

    .babelrc
        {
            "presets": ["@babel/preset-env"]
        }

    package.json scripts
        "build": "babel ./origen.js -o ./destino.js -w"
            ! ver como hacer mejor esto


        ! Check dotenv practices
        ! Check if best to instal babel globally
+ Babel


+ Base tsconfig.json
    This is a common array of setting across all deployment templates.

    npx tsc --init --rootDir src --outDir dist --target ES2022 --module NodeNext --strict --allowJs --allowSyntheticDefaultImports --declaration --declarationMap --esModuleInterop --experimentalDecorators --forceConsistentCasingInFileNames --noEmit --noFallthroughCasesInSwitch --noUnusedLocals --noUnusedParameters --removeComments --resolveJsonModule --skipDefaultLibCheck --skipLibCheck --sourceMap --lib ES2022,DOM

    ! include and exclude were manually added to the top level of package.json

    "include": ["src/**/*.ts"],
    "exclude": ["build", "node_modules", "**/*.spec.ts"],
    "compilerOptions": {
        "rootDir": "src",
        "outDir": "dist",
        "target": "ES2022",
        "module": "NodeNext",               // Enables TSC Modules Support

        "strict": true,                     // to deepdive and learn proper

        "allowJs": true,                    // In case some lib uses JS
        "allowSyntheticDefaultImports": true,
        "checkJs": true,                    // Report errors in .js files
        "declaration": true,                // Generate corresponding .d.ts file
        "declarationMap": true,             // Enables IDEs .ts code navigation
        "esModuleInterop": true,
        "experimentalDecorators": true,     // enables extra features to type Classes
        "forceConsistentCasingInFileNames": true,
        "noImplicitReturns": true,          // Error in case a functions return isn't typed

        "noEmit": true,                     /* Do not emit compiler output files like JavaScript source code, source-maps or declarations. (meaning do not compile code, only perform type checking) */

        "noFallthroughCasesInSwitch": true, // Ensures switch cases end on a break or return
        "noUnusedLocals": true,             // Report errors on unused locals
        "noUnusedParameters": true,         // Report errors on unused parameters
        "removeComments": true,
        "resolveJsonModule": true,
        "skipDefaultLibCheck": true,
        "skipLibCheck": true,               // Skip type checking all .d.ts filess
        "sourceMap": true,                  // .map files to enable better feedback and debugging

        "lib": [ "dom", "es2022" ],         // * adds typings for specific environments, improves intellisense a lot
    }

    ?
        files
        useDefineForClassFields
        path
        baseUrl
        incremental
            Me preguinto si funcionara con Parcel
        noEmit
        "skipLibCheck": true
            should I?
        "checkJs": true,
            ? Dunno if it could drive me crazy with errors from other modules or libs or things left unTyped, probably solved by generating .d.ts files?


        module
            Avoid the use of .mts and .cts
                It is better to use the module (tsconfig.json) and type (package.json) setting to modify this behaviour. Only use for outlier files.
            If set to ESNext one can forego the file extensions.
            Setting it to NodeNext has multiple implications best reviewed directly from the docs (Module Resollution, Transpile Output, etc):
                https://www.typescriptlang.org/tsconfig#node16nodenext-nightly-builds
                It forces the need to specify .js, .jsx, etc but it also allows for .json imports which are added as a declaration within the app's files the momment its built (Webpack).
+ Base tsconfig.json


+ Deployment Template: NodeJS
    - npm i -g nodemon ts-node @types/node typescript
        · Its generall practice to install the following packages as dev deps:
            npm i -D typescript @types/node
                * A good advantage of installing per project is keeping track of which versions were used. ( And as usuall to avoid the "it worked on my computer" escenario. )
    - npm init -y
    - [volta pin node]
    - Check +Base tsconfig.json to generate it

    - package.json
        "type": "module",
        "scripts": {
             "start": "npm run dev",
             "build": "tsc -p .",
             "dev": "nodemon --watch \"src/**/*.ts\" --exec \"ts-node\" --esm --transpile-only src/index.ts"
        },

    if tsc --importHelpers is being used then npm i -D tslib
        ! Casi seguro q ya esto esta por defecto

    - tsconfig.json
        ? Do I need "isolatedModules": true,
        "lib": [
            "ES2022",
            "DOM"
        ],
+ Deployment Template: NodeJS


+ Deployment Template: ReactJS thru Parcel
    https://parceljs.org/recipes/react

    - npm init -y
    - [volta pin node]
    - npm i -D typescript or Globally
    - npm i -D parcel
        There are somebugs if used globally and the sollutions didn't look promising.

    - npm i react react-dom
    - npm i -D @types/react @types/react-dom
    - Material UI
        https://mui.com/material-ui/getting-started/installation/
        npm i @mui/material @emotion/react @emotion/styled
        npm i @mui/icons-material @fontsource/roboto

    ( In Two Lines
        npm i react react-dom @mui/material @emotion/react @emotion/styled @mui/icons-material @fontsource/roboto
        npm i -D @types/react @types/react-dom
    )

    - edit package.json
        "type": "module",
        "source": "src/index.html",         // Specifies parcel entry points
        "scripts": {
            "start": "parcel",
            "build": "parcel build"
        },

        ! Aditionally one can edit the following to configure Parcel transpilation and builds:

            https://parceljs.org/features/targets/
                ! This document is a must read to tweak Parcel output, there is no escaping it, nor resume to make of it.

            * I didn't set them up because it was unclear to me if this forced transpilation on every excecution.
            ? Tengo la imprecion de q browserslist es para efectuarlo en todo y especificar los browsers y targets es solo para cuando build, confirmar leyendo.
            ? No confundir target con targets

            " https://parceljs.org/features/targets/#targets
                Parcel follows the dependencies in each resolved entry to build your source code for one or more targets. Targets specify the output directory or file path, as well as information about how your code should be compiled.
                By default, Parcel includes a single implicit target which outputs into the dist folder. This can be overridden using the --dist-dir CLI option.
                The output directory can also be specified in package.json using the targets field. This will override the --dist-dir CLI option.
            "
            browserslist
                Specify which browsers are going to be supported.
            engines
                " For Node.js and other targets ... are specified using a semver range. "
            targets

            "browserslist": [
                ">0.2%",                  // All browsers that have at least 0,2% of global market share
                "not dead",
                "not ie <= 11",
                "not op_mini all"
            ],
            "engines": {
                "node": ">= 16"
            },
            "targets": {
                "default": {
                "distDir": "./output"
                }
            },


    - edit tsconfig.json
        Check +Base tsconfig.json for a base file then mod:

        "include": ["src/**/*.ts", "src/**/*.tsx"],

        "isolatedModules": true,
        "jsx": "preserve",
        "lib": [
            "DOM",
            "DOM.Iterable",
            "ES2022",
        ],
        "baseUrl": ".",
        "paths": {
            "~*": ["./*"]
        }

        ? "include": [ "src" ] Should I? or Parcel does this on its self?

    - Collecting Base React Files
        Create a folder outside of the project and run:
            npx create-react-app my-app-front --template typescript

        ! Check if something changed from last time:
            · Compare tsconfig.json, package.json, file structure, .gitignore, etc.

        - Copy to the project /FRONT/src
            App.css, App.tsx, index.css, index.tsx

        - Copy to the project /FRONT/public
            index.html

    - Edit
        · src/index.css
            // with out this file things like margin 0 at the most basic level would be missing
                // ! Confirm
        · src/index.tsx
            remove reportWebVitals
        · src/App.tsx
        · [ remove all the import React from 'react'; lines ]

    - Create public/index.html
        https://parceljs.org/features/targets/#entries
            This article clarifies the use of Parcel's entry files and directories.

        <head>
            <script defer type="module" src="../src/index.tsx"></script>
        </head>
        <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root"></div>
        </body>

    - npm start

    ! Distinguir q el index.html q usa Parcel tal vez no debería ser el mismo q pongo en public
        Esta pregunta tal vez mandarla a AUXILIO

    - Notes
        ? The next article is added to the AUXILIO section, and it might be important to understand:
            https://parceljs.org/features/dependency-resolution/#typescript
            I don't fully undestand it, shouldn't absolute pathing work out of the box? what's that about ambient modules and which things can they fix?
                tsconfig : to map tilde paths to the root directory
                    "baseUrl": ".",
                    "paths": {
                        "~*": ["./*"]
                    }

        ! Parcel TypeScript Limitations - isolatedModules
            * See the following link for an ugly work-arround:
                https://parceljs.org/languages/typescript/#tsc
            https://parceljs.org/languages/typescript/#isolatedmodules
            " Because Parcel processes each file individually, it implicitly enables the isolatedModules option. This means that some TypeScript features like const enum that require cross-file type information to compile will not work. To be warned about usages of these features in your IDE and during type checking, you should enable this option in your tsconfig.json. "

            https://www.typescriptlang.org/tsconfig#isolatedModules
                " other transpilers only operate on a single file at a time, which means they can’t apply code transforms that depend on understanding the full type system. This restriction also applies to TypeScript’s ts.transpileModule API which is used by some build tools.
                These limitations can cause runtime problems with some TypeScript features like const enums and namespaces. Setting the isolatedModules flag tells TypeScript to warn you if you write certain code that can’t be correctly interpreted by a single-file transpilation process.
                It does not change the behavior of your code, or otherwise change the behavior of TypeScript’s checking and emitting process. "
                    Some examples of code which does not work when isolatedModules is enabled:
                        https://www.typescriptlang.org/tsconfig#exports-of-non-value-identifiers
                        https://www.typescriptlang.org/tsconfig#references-to-const-enum-members
                        https://www.typescriptlang.org/tsconfig#non-module-files
                            This last one could be a problem, it means ALL files should be modules (ie use import or export somewhere).

        ! Parcel TypeScript Limitations - baseUrl paths
            " Parcel does not currently support the baseUrl or paths options in tsconfig.json, which are TypeScript specific resolution extensions. Instead, you may be able to use Parcel's tilde or absolute specifiers to accomplish a similar goal. "
                tilde = ~ resolves to the nearest package.json (package root)
                absolute = / (project root)

        · Parcel React Tips
            https://parceljs.org/recipes/react/#tips
            " Avoid class components – Fast Refresh only works with function components (and Hooks).
            Export only React components – If a file exports a mix of React components and other types of values, its state will be reset whenever it changes. To preserve state, only export React components and move other exports to a different file if possible.
            Avoid unnamed default exports – Declaring components using a default exported arrow function will cause state to be reset when it is changed. Use a named function, or assign the arrow function to a variable instead.
            Keep entry components in their own files – Entry components should be in a separate file from the one that calls ReactDOM.render or they will be remounted on every change. "

        · http://typescript-react-primer.loyc.net/tutorial-2.html
            " One limitation of Parcel is that it doesn’t perform type checking (your code is translated to JavaScript but type errors are not detected). For small projects, this is not a big problem because Visual Studio Code performs its own type checking. It gives you red squiggly underlines to indicate errors and all errors are listed in the “Problems” pane (press Ctrl+Shift+M to show it). But if you want, you can npm install parcel-plugin-typescript for enhanced TypeScript support including type checking. "
                This default might be better for faster development and it could be forced or used by other means when building.

        · https://parceljs.org/recipes/react/#jsx
            " Parcel supports JSX automatically when it detects you are using React. If you’re using React 17 or later, it also automatically enables the modern JSX transform, which means you don't even need to import React for JSX to work, as you can see in App.js in the above example. "

        · https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#how-to-upgrade-to-the-new-jsx-transform
            " Since the new JSX transform doesn’t require React to be in scope, we’ve also prepared an automated script that will remove the unnecessary imports from your codebase. "

        · The react-app-env.d.ts references the types of react-scripts, and helps with things like allowing for SVG imports.
            Si no estoy entendiendo mal es solo para q TS pueda verificar react-scripts, pero por alguna razon no se instalaron al hacer este build, así q hasta no necesitarlo no debería agregar el archivo.
                " react-scripts is a set of scripts from the create-react-app starter pack. create-react-app helps you kick off projects without configuring, so you do not have to setup your project by yourself. react-scripts start sets up the development environment and starts a server, as well as hot module reloading. " - Stackoverflow
+ Deployment Template: ReactJS thru Parcel


+ Deployment Template: React Native
    - React Native
        npx react-native init AwesomeTSProject --template react-native-template-typescript
        npx react-native run-android
        npx react-native run-ios
        Desabilitar prettierrc si molesta:
            Es para q no marque como wavy line error cosas de estilos de codigo, espacios, etc.
            eslintrc.js
                rules: {
                    'prettier/prettier': 0,
                },

    - React Native Expo
        /* WIP Falta streamline tsconfig.json para React Native Expo, fijarse en  "extends": "expo/tsconfig.base" en el tsconfig.json creado por el template. Al menos agregar sourceMap !!! */

        npx create-expo-app --template

        · https://reactnative.dev/docs/typescript#how-typescript-and-react-native-works
            " Out of the box, transforming your files to JavaScript works via the same Babel infrastructure as a non-TypeScript React Native project. We recommend that you use the TypeScript compiler only for type checking. If you have existing TypeScript code being ported to React Native, there are one or two caveats to using Babel instead of TypeScript. "
            I belive this is about the noEmit tsconfig option.

        https://docs.expo.dev/guides/typescript/#typescript-for-config-files
        https://reactnative.dev/docs/typescript
        https://docs.expo.dev/guides/typescript/#webpackconfigjs

        · Notes on Native Base w/ TS
            ! Check the docs
            Do not use the base template as it installs with older SDKs instead issue in order:
                npm i native-base
                npx expo install react-native-svg@12.1.1
                npx expo install react-native-safe-area-context@3.3.2

        · Adding React Navigation
            https://reactnavigation.org/docs/getting-started/#installation

            npm i @react-navigation/native
            npx expo install react-native-screens react-native-safe-area-context
+ Deployment Template: React Native


+ QUESTIONS
    * VS Code alternative, better squiggly wavy lines for errors

    - Using Nightly Ver
        " I generally recommend people to use the nightly version because the compiler test suite only catches more bugs over time " - https://basarat.gitbook.io/typescript/getting-started#typescript-version
            What does this mean? What's implied?

    - Base Setup
        ! Might need to add /dist since the files seam to get quite big
        ! types field

    - Git Ignore JS?
        Al hacer las cosas en TS tonces tendria q agregar JS al git ignore? Para excluir build o alguna cosa así. O q el build se haga automatico al subir el git en un server o algo así.

    - No entiendo lo q implica esta sección
        How to specify format imports - https://yonatankra.com/how-to-use-the-new-ecmascript-module-in-typescript/#How_to_specify_format_imports

    - Deployment Template: ReactJS thru Parcel
        · Why not put the script with defer on the head on index.html?
            This part of the docs shows it should be put there https://parceljs.org/getting-started/migration/#code-changes
        ? "include": [ "src" ] Should I? or Parcel does this on its self?
        · A way to add include and exclude in the npx tsc --init cmd
        ! edit package.json > browserslist, targets
            https://parceljs.org/features/targets/
            I am unsure if one can set this values to be used ONLY in the build script, it seams that if specified Parcel will transpile everytime, but I need confirmation, or if they should be specified as args in the scripts section of package.json.
+ QUESTIONS


+ TO-DO
    /// <reference path=""> File References
    Ambient
    Treeshaking and Bundling
    sourceMaps what are they
    Parece q MUI tiene algunos problemas con typescript revisar https://mui.com/material-ui/guides/typescript/
    ! Parcel puede levantar simultaneamente front y back si no entendí mal
        https://parceljs.org/features/targets/#package.json%23targets.*.source
            " For example, you could build your frontend and backend simultaneously, or your desktop and mobile apps. "


    Preformatear testing
    Helps Documenting
    'tooling' google fullmeaing
    futuro del tipado de lenguajes
    dev error checking, entender sus limites correctamente
    Transpiled by default to target JS Ver
    Type
    Mutacion
    Docu
    Control null, undefined, NaN, etc
    ----showConfig add this flag to the building it could help to confirm the tsc cfg each time is run
    VS Code > Settings > Extensions > TypeScript
    VS Code > Settings > Extensions > ESLint

    https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next
    .eslintrc.cjs
    https://parceljs.org/features/dependency-resolution/#query-parameters

    http://typescript-react-primer.loyc.net/minification.html
        https://parceljs.org/features/production/
            Parcel hace minificacion al correr el build

    ! Add VS Code debugging to each deployment section
        launch.json
            "preLaunchTask": "tsc: build - tsconfig.json"
                Edit prev line to use the correct npm script or copy the script
    ! Mejorar la seccion de ReactJS Parcel browserslist y target

    ! No se si se vuelve una contradiccion q este usando la version "estable" de TS pero activando todo lo q pueda de la ultima nightly ver con cosas como NodeNext
+ TO-DO


+ AUXILIO
    ! https://parceljs.org/features/dependency-resolution/#typescript
        Esto parece bastante importante pero no se bien como aplicarlo y puede q solucione una buena cantidad de problemas.

    ! Implicit Environments
        " https://parceljs.org/features/targets/#implicit-environments
            When one file depends on another, the environment is inherited from its parent. But how you depend on the asset can change some properties of the environment. For example, when depending on a service worker, the environment is automatically changed into a service worker context so that the code is compiled appropriately.

            navigator.serviceWorker.register(new URL('service-worker.js', import.meta.url));
        "

    - ts-node-dev
        https://github.com/wclr/ts-node-dev

        Ya q se supone q esto permite transpilacion mucho mas rapida y es como las nuevas herramientas lo estan haciendo.
            Instalar el packete npm i -g esm me parecia un error

        --transpile-only, might void checks in TypeScript only files.
                Preguntar sobre concecuencias negativas

    - https://parceljs.org/recipes/react/#code-splitting

    - https://parceljs.org/features/development/#auto-install

    - https://parceljs.org/features/dependency-resolution/

    - ts-node
        No logre hacerlo de esta forma https://github.com/TypeStrong/ts-node#via-tsconfigjson-recommended

    - Parcel
        La razon por la q no lo use aun es por no poder evaluar q tan fiable es.
        Me interesa mucho la aplicación de compilación accelerada.
        http://typescript-react-primer.loyc.net/tutorial-3.html
        https://parceljs.org/docs/
        https://blog.logrocket.com/sharing-code-react-native-web/#:~:text=Setting%20up%20Parcel,React%20Native%20project%20called%20web%2F%20.

    - tsconfig.json
        https://www.meziantou.net/which-version-of-ecmascript-should-i-use-in-the-typescript-configuration.htm
            " TypeScript supports the configuration inheritance. So, you can create a common tsconfig.json that contains all the settings, and a tsconfig.dev.json that inherits from tsconfig.json. You can build using tsc tsconfig.dev.json. You can read the documentation about configuration inheritance for more information "

    - https://flow.org/

    - https://parceljs.org/recipes/image/#image-optimization
+ AUXILIO


+ SOURCES
    - Fireship - TypeScript - The Basics
        https://www.youtube.com/watch?v=ahCwqrYpIuM

    - TypeScript Deep Dive by Basarat Ali Syed
        https://basarat.gitbook.io/typescript/

    - How we employed the new ecmascript module support in TypeScript
        https://yonatankra.com/how-to-use-the-new-ecmascript-module-in-typescript/

    - TypeScript: TSConfig Reference
        https://www.typescriptlang.org/tsconfig

    - https://www.npmjs.com/package/ts-node

    - TypeScript+React Primer
        Esta pagina muestra una forma más moderna de aplicar TypeScript usando parcel
        http://typescript-react-primer.loyc.net/tutorial-3.html
        http://typescript-react-primer.loyc.net/tutorial-2.html

    - Parcel Docs
        https://parceljs.org
        https://parceljs.org/getting-started/webapp/
        https://parceljs.org/recipes/react/
        https://parceljs.org/getting-started/library/
        https://parceljs.org/features/targets/

    - Which version of EcmaScript should I use in the TypeScript configuration - Meziantou's blog
        https://www.meziantou.net/which-version-of-ecmascript-should-i-use-in-the-typescript-configuration.htm
+ SOURCES
