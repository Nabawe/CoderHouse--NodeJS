+ CODEX
+ TERMS
+ TOOLS

+ Mantras

+ Base Setup
+ Babel
+ Base tsconfig.json
+ Deployment Template: NodeJS

+ SOURCES


+ CODEX
    + Section
        - Subsection or Item
            · Subsection or Item
                * Subsection or Item (Free-form from this level downwards, try to avoid asterisk as it could have other uses)
                    <> Subsection or Item

    - Abbreviations:
        · TS    = TypeScript
        · JS    = JavaScript
        · TSC   = TypeScript Compiler
        · RN    = React Native
+ CODEX


+ TERMS
    - Transpiler
        Source to source compiler. AKAs: source-to-source compiler, transcompiler
+ TERMS


+ TOOLS
    - Definitely Typed
        https://www.typescriptlang.org/dt/
        https://github.com/DefinitelyTyped/DefinitelyTyped
        To find TypeScrip enabled libs or to obtain the Types Definitions Files.

    - Paste JSON as Code (Refresh) by Will 保哥
        https://marketplace.visualstudio.com/items?itemName=doggy8088.quicktype-refresh
+ TOOLS


+ Mantras
    " you can incrementally upgrade your JavaScript code to TypeScript "

    " Type errors do not prevent JavaScript emit. To make it easy for you to migrate your JavaScript code to TypeScript, even if there are compilation errors, by default TypeScript will emit valid JavaScript the best that it can. "
+ Mantras


+ Base Setup
    npm i -D typescript or globally
        Parece ser q no se puede pinear con Volta

    VS Code
    Preferences: Open Workspace Settings (JSON)
    "files.exclude": {
        "**/*.js": { "when": "$(basename).ts" },
        "/.js": { "when": "$(basename).tsx" }
    }
        This is to exclude  JS search results
            ? Ver si se tambien excluye .mjs

    package.json root
        "main": "dist/index.js",
            // ? NO ESTOY SEGURO Q PONER AQUI, si index.js, dist/index.js .ts .tsx o q
            /* Recordar q todo esta corriengo gracias a Parcel por ende creo q no es importante ya q no estaria usando node . o nodemon posiblmente si deberia ir a dist/index.js a menos q configue react para correr TypeScript */
        "type": "module",
        "types": "dist/index.d.ts",         // So that index.d.ts files are generated
            ? Creo q esta linea debería apuntar a un directorio
            * Following Parcel Docs, it might need this line to know to autogenerate the .d.ts files
            https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html
                Segun las docs es opcional especificarlo y al no especificarlo se busca en base a lo puesto en package.json main.
        "scripts": {
            "check": "tsc --noEmit"
        },


    ! CHECK IF THIS IS NECESARY
        https://typescript-eslint.io/docs/

    .gitignore
        # parcel cache (https://parceljs.org/)
        .cache
        .parcel-cache

    ! Might need to add /dist since the files seam to get quite big
+ Base Setup


+ Babel
    npm install @babel/core @babel/cli @babel/preset-env
        El primer módulo es la librería principal, el segundo es el cliente por terminal, y el tercero es el plugin de configuración para que soporte todos los JavaScript de la nueva generación.

    .babelrc
        {
            "presets": ["@babel/preset-env"]
        }

    package.json scripts
        "build": "babel ./origen.js -o ./destino.js -w"
            ! ver como hacer mejor esto


        ! Check dotenv practices
        ! Check if best to instal babel globally
+ Babel


+ Base tsconfig.json
    This is a common array of setting across all deployment templates.

    npx tsc --init --rootDir src --outDir dist --target ES2022 --module NodeNext --strict --allowJs --allowSyntheticDefaultImports --declaration --declarationMap --esModuleInterop --experimentalDecorators --forceConsistentCasingInFileNames --noEmit --noFallthroughCasesInSwitch --noUnusedLocals --noUnusedParameters --removeComments --resolveJsonModule --skipDefaultLibCheck --skipLibCheck --sourceMap --lib ES2022,DOM

    ! include and exclude were manually added to the top level of package.json

    "include": ["src/**/*.ts"],
    "exclude": ["build", "node_modules", "**/*.spec.ts"],
    "compilerOptions": {
        "rootDir": "src",
        "outDir": "dist",
        "target": "ES2022",
        "module": "NodeNext",               // Enables TSC Modules Support

        "strict": true,                     // to deepdive and learn proper

        "allowJs": true,                    // In case some lib uses JS
        "allowSyntheticDefaultImports": true,
        "checkJs": true,                    // Report errors in .js files
        "declaration": true,                // Generate corresponding .d.ts file
        "declarationMap": true,             // Enables IDEs .ts code navigation
        "esModuleInterop": true,
        "experimentalDecorators": true,     // enables extra features to type Classes
        "forceConsistentCasingInFileNames": true,
        "noImplicitReturns": true,          // Error in case a functions return isn't typed

        "noEmit": true,                     /* Do not emit compiler output files like JavaScript source code, source-maps or declarations. (meaning do not compile code, only perform type checking) */

        "noFallthroughCasesInSwitch": true, // Ensures switch cases end on a break or return
        "noUnusedLocals": true,             // Report errors on unused locals
        "noUnusedParameters": true,         // Report errors on unused parameters
        "removeComments": true,
        "resolveJsonModule": true,
        "skipDefaultLibCheck": true,
        "skipLibCheck": true,               // Skip type checking all .d.ts filess
        "sourceMap": true,                  // .map files to enable better feedback and debugging

        "lib": [ "dom", "es2022" ],         // * adds typings for specific environments, improves intellisense a lot
    }

    ?
        files
        useDefineForClassFields
        path
        baseUrl
        incremental
            Me preguinto si funcionara con Parcel
        noEmit
        "skipLibCheck": true
            should I?
        "checkJs": true,
            ? Dunno if it could drive me crazy with errors from other modules or libs or things left unTyped, probably solved by generating .d.ts files?


        module
            Avoid the use of .mts and .cts
                It is better to use the module (tsconfig.json) and type (package.json) setting to modify this behaviour. Only use for outlier files.
            If set to ESNext one can forego the file extensions.
            Setting it to NodeNext has multiple implications best reviewed directly from the docs (Module Resollution, Transpile Output, etc):
                https://www.typescriptlang.org/tsconfig#node16nodenext-nightly-builds
                It forces the need to specify .js, .jsx, etc but it also allows for .json imports which are added as a declaration within the app's files the momment its built (Webpack).
+ Base tsconfig.json


+ Deployment Template: NodeJS
    - npm i -g nodemon ts-node @types/node typescript
        · Its generall practice to install the following packages as dev deps:
            npm i -D typescript @types/node
                * A good advantage of installing per project is keeping track of which versions were used. ( And as usuall to avoid the "it worked on my computer" escenario. )
    - npm init -y
    - [volta pin node]
    - Check +Base tsconfig.json to generate it

    - package.json
        "type": "module",
        "scripts": {
             "start": "npm run dev",
             "build": "tsc -p .",
             "dev": "nodemon --watch \"src/**/*.ts\" --exec \"ts-node\" --esm --transpile-only src/index.ts"
        },

    if tsc --importHelpers is being used then npm i -D tslib

    - tsconfig.json
        ? Do I need "isolatedModules": true,
        "lib": [
            "ES2022",
            "DOM"
        ],
+ Deployment Template: NodeJS


+ SOURCES
    - Fireship - TypeScript - The Basics
        https://www.youtube.com/watch?v=ahCwqrYpIuM

    - TypeScript Deep Dive by Basarat Ali Syed
        https://basarat.gitbook.io/typescript/

    - How we employed the new ecmascript module support in TypeScript
        https://yonatankra.com/how-to-use-the-new-ecmascript-module-in-typescript/

    - TypeScript: TSConfig Reference
        https://www.typescriptlang.org/tsconfig

    - https://www.npmjs.com/package/ts-node

    - TypeScript+React Primer
        Esta pagina muestra una forma más moderna de aplicar TypeScript usando parcel
        http://typescript-react-primer.loyc.net/tutorial-3.html
        http://typescript-react-primer.loyc.net/tutorial-2.html

    - Parcel Docs
        https://parceljs.org
        https://parceljs.org/getting-started/webapp/
        https://parceljs.org/recipes/react/
        https://parceljs.org/getting-started/library/
        https://parceljs.org/features/targets/

    - Which version of EcmaScript should I use in the TypeScript configuration - Meziantou's blog
        https://www.meziantou.net/which-version-of-ecmascript-should-i-use-in-the-typescript-configuration.htm
+ SOURCES
