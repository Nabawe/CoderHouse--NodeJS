+ Qué quiere decir 'tienen la preferencia de cargarse primero'
+ Posibles Errores en la Slide 05
+ npm version patch y git commit
+ Especificar ~ ^ * en el comando npm
+ Server Listener vs connectedServer
+ req = Request Body. res = Response Object
+ HTTPS Express Server
+ App vs Server
+ Tipos de res
+ Orden de Server.listen
+ Async File Retrieve and Display
+ Primer [ es indentado
+ ReTutor


+ Qué quiere decir 'tienen la preferencia de cargarse primero'
    Slide 05 - NPM
        " Los módulos básicos tienen la preferencia de cargarse primero si su identificador es pasado desde require(). "

    Qué significa e implica lo anterior?
+


+ Posibles Errores en la Slide 05
    " Si instalamos una dependencia en forma global, todos nuestros programas desarrollados en NodeJS contarán con esa librería, y con la versión que haya sido instalada. "
        Esto no es incorrecto? Cuando instalamos de forma global no es q simplemente modificamos nuestro entorno? Por ejemplo no veo q se agregue la dependencia nodemon a todos los paquetes q voy creando. O depende de la librería global?

            Tutor - La afirmación de la diapositiva es correcta. Cuando uno instala una dependencia global, se instala en el root de tu usuario de tu máquina, y queda con la versión que se instaló. Y desde ahí es accesible por cualquier proyecto existente o nuevo, al ser global no agrega a cada proyecto.
                FF - Entonces como agrego la dependencia de un paquete q tengo instalado de forma global a un proyecto?
+


+ npm version patch y git commit
    https://docs.npmjs.com/cli/v8/commands/npm-version
        "
            If run in a git repo, it will also create a version commit and tag. This behavior is controlled by git-tag-version (see below), and can be disabled on the command line by running npm --no-git-tag-version version. It will fail if the working directory is not clean, unless the -f or --force flag is set.

            If supplied with -m or --message config option, npm will use it as a commit message when creating a version commit. If the message config contains %s then that will be replaced with the resulting version number
        "
    No entiendo bien como utilizar lo anterior.

    Quiciera crear un comando q me hace version patch, git add . y git commit en 1 línea, es este correcto:

+


+ Especificar ~ ^ * en el comando npm
    Como se hace para q al instalar una librería se coloquen los símbolos ~ ^ * etc. sin tener q editarlos manualmente del package.json
        Tutor - npm install [package]@[version]
+


+ Server Listener vs connectedServer
    Leyendo la documentación vi q lo q devuelve Serve.Listen es un "escuchador" (listener) entonces no seria más correcto guardarlo como puse en mi codigo?.
    index.mjs:
        Server.activeListeners = [ Server.listen ]

    Hay alguna razón para como lo pusieron en Coder?

    Slides : " Listen, además, devuelve un objeto que contiene los datos del servidor conectado. "

    Más q los datos del servidor conectado los datos del escuchador creado o no?. El puntero al server es la constante Server no?.

        Tutor - Es un objeto escucha de la conexión del servidor, como lo tenemos en las diapositivas es la forma tradicional del cual se usa para un servidor web. Pero el tema de guardarlo es depende de qué quieras hacer con el objeto. Si lo necesitás en algún lado de tu aplicación y necesitás accederlo está bien guardarlo, caso contrario no tiene sentido.
            FF - Pero me parecio ver q hay algo q ya los guarda o guarda algo similar y la pregunta apuntaba a cual era la forma correcta de hacerlo.
+


+ req = Request Body. res = Response Object
    // req = Request Body
    // res = Response Object

    Es correcto o son otra cosa?
        FF - Incorrecto son solo objetos y a estos se les suele agregar varias cosas.
+


+ HTTPS Express Server
    Pedir al profesor q de un ejemplo de como levantar un server HTTPS, y sobre los certificados.

    https://stackoverflow.com/questions/11744975/enabling-https-on-express-js
+


+ App vs Server
    Al usar el modulo HTTP al servidor lo llaman server pero en express le ponen app ... me terminan mareando con la inconsistencia, hay alguna razón? Si vi q en la doc oficial también esta así.
        Luego de leer más y aprender creo q a Express le pondría MiddleWare o MidServer.
            Le volvi a poner Server xD va a depender de q realmente este haciendo. Lo de app parece venir por express app instance.

        Respuesta del Tutor descartada.
+


+ Tipos de res
    Un lugar q explique claramente los tipos de response, send, render, end, etc.

        FF - https://expressjs.com/en/4x/api.html
+


+ Orden de Server.listen
    Hay alguna razon por la cual el profesor coloca:
        app.listen( PORT, ()

    Debajo de todos los:
        app.get

    Afecta en algo? Si no entiendo mal es como si preparase el Server Primero y recien ahi lo 'activa', qué es lo más correcto? Ya q hay cosas como el 'on error' q se especifican LUEGO de tener el listener.

        Tutor - La razón sería que idealmente se ponga abajo de todo, luego de inicializar todo lo que necesita la app pero no pasa nada si se pone el listen arriba de los app.get. En aplicaciones complejas uno tiene que asegurar que antes del listen se cargue todo lo que la app necesita, de lo contrario la app figurará disponible cuando en realidad no lo está.
            FF - Respuesta genérica...
+


+ Async File Retrieve and Display
    Esta planteado correctamente en index.mjs el colocar async así:
        Server.get( '/products', async ( req, res ) => {

    O eso arruina al .get?.
    O debería poner una async function englobando todo hasta el res.send para q espere la lectura del archivo y recien ahi envíe?.

        Tutor - Está correcto lo que hiciste, sino te lo marcaría
+


+ Primer [ es indentado
    Porque aparece corrido el corchete si el archivo JSON no tiene indentación alguna, la etiqueta pre esta agregando eso?

    Para verlo borre /n en index.mjs :
        \n${JSON.stringify( ( await JSONBoxy.getAll() ), null, 4 )}

    Y cual es la forma correcta de solucionarlo?

    white-space: pre-line;
+


+ ReTutor
    Hola Franco, como va? Ahí revisé el desafío y está aprobado! Muy buen trabajo. Como consejo te diría que trates de implementar solo lo que te pide la consigna, con las pautas que te da. Porque sino sopones escenarios que no pasarán y complejizan la solución. A medida que pasen los desafíos tendrás mayor complejidad o más consignas a implementar así que no te preocupes si por ahora te resulta fácil.

    Te comento esto porque vi que agregaste métodos para obtener el 1er y último elemento del archivo, y también de pasar la ubicación de donde está el archivo. Súper válido pero para la consigna no era necesario, vos controlás el contenido del archivo y su ubicación, en esta instancia estaba más que bien que dentro de la clase sepa donde está el archivo de productos, lo mismo con el contenido, el endpoint de random no tendría que responder null, porque lo controlás vos. Distinto sería si se pedía un endpoint donde te pasan cualquier ID.
        FF - Estoy de acuerdo con lo q dice y tome nota pero... lo de solo obtener un resultado q exista es algo mucho más complejo ya q el numero tiene q ser al azar y tendria q quitar de los posibles resultados al azar las id q no existan, tonces tendría q primero relevar todos los id q existen y generar esa pileta de donde se sacan los ids lo puedo imaginar pero...
        Lo del primer y ultimo resultado fueron consecuencias del desarrollo.

    FF - JSONBox Esta lleno de errores, de diceño y no funcionales
        Tutor - Depende de como lo veas, para este desafío que se avalúa el getAll y el random, está perfecto. Ya te comenté sobre lo que vi en random y como no está mal, está aprobado. En desafíos que correspondan, te marcaré las cosas de diseño.
+



https://expressjs.com/en/starter/static-files.html
Server.use(Express.static("public"));

res.sendFile(__dirname + "/views/index.html");


Quiciera crear un comando q me hace version patch, git add . y git commit en 1 línea, es este correcto:


HTTPS Express Server

Improve getLastId

Conciderar dejar index.mjs bastante peleado y crear una clase FileServer a la q se le pasa un JSONBox en la creación.


Porque muestra address de esa manera
    Server Up and Listening, Info: {
        "address": "::",


JSONBox Esta lleno de errores, de diceño y no funcionales y muchas de mis preguntas apuntan a eso.


Pensar agregar un package.json por cada clase de /classes ya q usan import y son módulos, así no depende de solo la extensión el reconocerlos y pensar como es q se le agregarían las dependencias de por ejemplo JSONBox al proyecto q lo fuera a utilizar.
    ! Ademas es importante ya q sino no se save q version de fs se uso
        Aunque parece q al ser modulo nativo no aparece hacer pregunta de como se marca q version de modulo nativo usar o eso ya seria la version de NodeJS en si?


Apropósito el archivo productos.json le falta el id 3, así se ve q pasa cuando el rnd da null
